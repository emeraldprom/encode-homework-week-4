import Head from "next/head";
import { ChangeEvent, useId, useState } from "react";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import essay from "@/lib/essay";

const DEFAULT_CHUNK_SIZE = 1024;
const DEFAULT_CHUNK_OVERLAP = 20;
const DEFAULT_TOP_K = 2;
const DEFAULT_TEMPERATURE = 0.1;
const DEFAULT_TOP_P = 1;

export default function Home() {
  const answerId = useId();
  const sourceId = useId();
  const [text, setText] = useState(essay);
  const [needsNewIndex, setNeedsNewIndex] = useState(true);
  const [buildingIndex, setBuildingIndex] = useState(false);
  const [runningQuery, setRunningQuery] = useState(false);
  const [nodesWithEmbedding, setNodesWithEmbedding] = useState([]);
  const [answer, setAnswer] = useState("");
  const [story, setStory] = useState("");

  const hardcodedQuery =
    "Who are the 4 main characters? Present them in a table as name, description, personality";
  const storyPrompt =
    "Take all the information from the table, and write one story.";

  return (
    <>
      <Head>
        <title>LlamaIndex.TS Playground</title>
      </Head>
      <main className="mx-2 flex h-full flex-col lg:mx-56">
        {/* Upload Section */}
        <div className="my-2 flex flex-col space-y-2">
          <Label htmlFor={sourceId}>Upload source text file:</Label>
          <Input
            id={sourceId}
            type="file"
            accept=".txt"
            onChange={(e: ChangeEvent<HTMLInputElement>) => {
              const file = e.target.files?.[0];
              if (file) {
                const reader = new FileReader();
                reader.onload = (event) => {
                  const fileContent = event.target?.result as string;
                  setText(fileContent);
                  setNeedsNewIndex(true);
                };
                if (file.type !== "text/plain") {
                  console.error(`${file.type} parsing not implemented`);
                  setText("Error");
                } else {
                  reader.readAsText(file);
                }
              }
            }}
          />
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col space-y-4 my-4">
          <Button
            disabled={!needsNewIndex || buildingIndex || runningQuery}
            onClick={async () => {
              setAnswer("Building index...");
              setBuildingIndex(true);
              setNeedsNewIndex(false);
              // Post the text and hardcoded settings to the server
              const result = await fetch("/api/splitandembed", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  document: text,
                  chunkSize: DEFAULT_CHUNK_SIZE,
                  chunkOverlap: DEFAULT_CHUNK_OVERLAP,
                }),
              });
              const { error, payload } = await result.json();

              if (error) {
                setAnswer(error);
              }

              if (payload) {
                setNodesWithEmbedding(payload.nodesWithEmbedding);
                setAnswer("Index built!");
              }

              setBuildingIndex(false);
            }}
          >
            {buildingIndex ? "Building Vector index..." : "Build index"}
          </Button>

          {!buildingIndex && !needsNewIndex && !runningQuery && (
            <>
              <Button
                className="my-2"
                type="submit"
                disabled={needsNewIndex || buildingIndex || runningQuery}
                onClick={async () => {
                  setAnswer("Running query...");
                  setRunningQuery(true);
                  // Post the hardcoded query and nodesWithEmbedding to the server
                  const result = await fetch("/api/retrieveandquery", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                      query: hardcodedQuery,
                      nodesWithEmbedding,
                      topK: DEFAULT_TOP_K,
                      temperature: DEFAULT_TEMPERATURE,
                      topP: DEFAULT_TOP_P,
                    }),
                  });

                  const { error, payload } = await result.json();

                  if (error) {
                    setAnswer(error);
                  }

                  if (payload) {
                    setAnswer(payload.response);
                  }

                  setRunningQuery(false);
                }}
              >
                Extract Characters
              </Button>

              <Button
                className="my-2"
                onClick={async () => {
                  setStory("Generating story...");
                  setRunningQuery(true);
                  // Post the story prompt and the extracted table data
                  const result = await fetch("/api/retrieveandquery", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                      query: storyPrompt,
                      nodesWithEmbedding,
                      topK: DEFAULT_TOP_K,
                      temperature: DEFAULT_TEMPERATURE,
                      topP: DEFAULT_TOP_P,
                    }),
                  });

                  const { error, payload } = await result.json();

                  if (error) {
                    setStory(error);
                  }

                  if (payload) {
                    setStory(payload.response);
                  }

                  setRunningQuery(false);
                }}
              >
                Write Story
              </Button>
            </>
          )}
        </div>

        {/* Answer Section */}
        <div className="my-2 flex h-1/4 flex-auto flex-col space-y-2">
          <Label htmlFor={answerId}>Answer (Character Table):</Label>
          <Textarea
            className="flex-1"
            readOnly
            value={answer}
            id={answerId}
          />
        </div>

        {/* Story Section */}
        <div className="my-2 flex h-1/4 flex-auto flex-col space-y-2">
          <Label>Generated Story:</Label>
          <Textarea className="flex-1" readOnly value={story} />
        </div>
      </main>
    </>
  );
}
